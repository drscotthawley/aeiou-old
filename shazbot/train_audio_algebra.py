# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_train_audio_algebra.ipynb (unless otherwise specified).

__all__ = ['AudioAlgebra', 'main']

# Cell
from prefigure.prefigure import get_all_args, push_wandb_config
from copy import deepcopy
import math
import json

import accelerate
import sys
import torch
import torchaudio
from torch import optim, nn
from torch import multiprocessing as mp
from torch.nn import functional as F
#from torch.utils import data
from tqdm import tqdm, trange
from einops import rearrange, repeat

import wandb
from .viz import embeddings_table, pca_point_cloud, audio_spectrogram_image, tokens_spectrogram_image
import shazbot.blocks_utils as blocks_utils
from .icebox import load_audio_for_jbx, IceBoxEncoder

# Cell
class AudioAlgebra(nn.Module):
    def __init__(self, global_args, device):
        super().__init__()

        self.device = device

        self.encoder = IceBoxEncoder(global_args)


    def loss(self, reals):

        if self.pqmf_bands > 1:
            encoder_input = self.pqmf(reals)
        else:
            encoder_input = reals

        with torch.cuda.amp.autocast():
            latents = self.encoder(encoder_input).float()

        loss = 0# TODO: fill in mse_loss + mrstft_loss

        log_dict = {
            'train/mse_loss': mse_loss.detach(),
            'train/mb_distance': mb_distance.detach(),
        }

        return loss, log_dict

# Cell
def main():

    args = get_all_args()

    args.random_crop = False

    torch.manual_seed(args.seed)

    try:
        mp.set_start_method(args.start_method)
    except RuntimeError:
        pass

    accelerator = accelerate.Accelerator()
    device = accelerator.device
    print('Using device:', device, flush=True)

    aa_model = AudioAlgebra(args, device)

    accelerator.print('Parameters:', blocks_utils.n_params(diffusion_model))

    # If logging to wandb, initialize the run
    use_wandb = accelerator.is_main_process and args.name
    if use_wandb:
        import wandb
        config = vars(args)
        config['params'] = utils.n_params(diffusion_model)
        wandb.init(project=args.name, config=config, save_code=True)
